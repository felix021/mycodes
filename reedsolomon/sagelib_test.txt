"""
This is an example to use sagelib (https://bitbucket.org/jsrn/sagelib).

These codes should run in the sage CLI interface, not as standalone 
python script. It utilized the GS algorithm provided in sagelib to 
decode an encoded codeword.
"""

import sagelib

n = 7
k = 5

q = n + 1

#init a Galois Field on 2^3
#and then 'a' is the prim element of GF(8)
G.<a> = GF(n + 1)

#calculate the support vector of GF(8)
alphas = [a^i for i in range(n)]

#P is univariable polynomial over G
P = G['x']

#msg to be sent: [a^2 + a + 1, a^2, 1, a, a + 1]
# => a^5 + a^2 * x + 0 * x^2 + a * x^3 + a^3 * x^4
msg = [a^i for i in [5,2,0,1,3]]

#msg polynomial: (a + 1)*x^4 + a*x^3 + x^2 + a^2*x + a^2 + a + 1
Pmsg = P(msg)

#rs encoder is sagelib
rs = sagelib.rs.GRS(G, n, k, alphas)        

#codeword to be sent: (a + 1, a^2 + a + 1, 0, a^2, a, a^2 + 1, 0)
#it's same as: codeword = [Pmsg(i) for i in alphas]
codeword = rs.encode(Pmsg)

#Guruswami-Sudan
#choose tau
tau = 0
s, l = sagelib.gs_params(n, k, tau) #(2, 3)

points = [(a^i, codeword[i]) for i in range(n)]
"""
[(1, a + 1),
 (a, a^2 + a + 1),
 (a^2, 0),
 (a + 1, a^2),
 (a^2 + a, a),
 (a^2 + a + 1, a^2 + 1),
 (a^2 + 1, 0)]
"""

wy = k - 1 #(1, k-1)-degree?
Q = sagelib.gs_construct_Q(points, tau, (s, l), wy)
#Q(x, y) = (a)*x^13 + (a^2)*x^12 + (a^2)*x^11 + (a^2 + 1)*x^10 + (a + 1)*x^9*y + (a + 1)*x^8*y + (a^2)*x^8 + (a^2 + a)*x^7*y + (a + 1)*x^7 + (a^2 + a + 1)*x^6*y + (a^2)*x^5*y^2 + (a^2 + a)*x^5*y + (a^2 + a + 1)*x^4*y^2 + (a + 1)*x^4*y + (a^2)*x^3*y^2 + (a)*x^4 + (a)*x^3*y + x^2*y^2 + (a^2 + a)*x*y^3 + (a^2 + a)*x^3 + x^2*y + (a + 1)*y^3 + (a + 1)*x^2 + (a^2 + a)*x*y + (a^2 + a)*y^2 + (a^2)*x + (a^2 + a)*y + (a + 1)

sagelib.factor_bivariate_linear(Q)                 
#returned: [(a + 1)*x^4 + a*x^3 + x^2 + a^2*x + a^2 + a + 1]
#It's just the Pmsg 'sent' before
